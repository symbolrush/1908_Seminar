@article{RJ-2011-002,
author = {Wickham, Hadley},
journal = {The R Journal},
number = {1},
pages = {5--10},
title = {{testthat: Get Started with Testing}},
url = {https://journal.r-project.org/archive/2011/RJ-2011-002/index.html},
volume = {3},
year = {2011}
}
@book{Wickham,
abstract = {First edition. Includes index. Turn your R code into packages that others can easily download and use. This practical book shows you how to bundle reusable R functions, sample data, and documentation together by applying author Hadley Wickham's package development philosophy. In the process, you'll work with devtools, roxygen, and testthat, a set of R packages that automate common development tasks. Devtools encapsulates best practices that Hadley has learned from years of working with this programming language. Ideal for developers, data scientists, and programmers with various backgrounds, this book starts you with the basics and shows you how to improve your package writing over time. You'll learn to focus on what you want your package to do, rather than think about package structure. Learn about the most useful components of an R package, including vignettes and unit testsAutomate anything you can, taking advantage of the years of development experience embodied in devtoolsGet tips on good style, such as organizing functions into filesStreamline your development process with devtoolsLearn the best way to submit your package to the Comprehensive R Archive Network (CRAN)Learn from a well-respected member of the R community who created 30 R packages, including ggplot2, dplyr, and tidyr. Machine generated contents note: pt. I Getting Started -- 1. Introduction -- Philosophy -- Getting Started -- Conventions -- Colophon -- 2. Package Structure -- Naming Your Package -- Requirements for a Name -- Strategies for Creating a Name -- Creating a Package -- RStudio Projects -- What Is an RStudio Project File? -- What Is a Package? -- Source Packages -- Bundled Packages -- Binary Packages -- Installed Packages -- In-Memory Packages -- What Is a Library? -- pt. II Package Components -- 3.R Code -- R Code Workflow -- Organizing Your Functions -- Code Style -- Object Names -- Spacing -- Curly Braces -- Line Length -- Indentation -- Assignment -- Commenting Guidelines -- Top-Level Code -- Loading Code -- The R Landscape -- When You Do Need Side Effects -- S4 Classes, Generics, and Methods -- CRAN Notes -- 4. Package Metadata -- Dependencies: What Does Your Package Need? -- Versioning -- Other Dependencies -- Title and Description: What Does Your Package Do? -- Author: Who Are You? -- On CRAN -- License: Who Can Use Your Package? -- On CRAN -- Version -- Other Components -- 5. Object Documentation -- The Documentation Workflow -- Alternative Documentation Workflow -- Roxygen Comments -- Documenting Functions -- Documenting Datasets -- Documenting Packages -- Documenting Classes, Generics, and Methods -- S3 -- S4 -- RC -- Special Characters -- Do Repeat Yourself -- Inheriting Parameters from Other Functions -- Documenting Multiple Functions in the Same File -- Text Formatting Reference Sheet -- Character Formatting -- Links -- Lists -- Mathematics -- Tables -- 6. Vignettes: Long-Form Documentation -- Vignette Workflow -- Metadata -- Markdown -- Sections -- Lists -- Inline Formatting -- Tables -- Code -- Knitr -- Options -- Development Cycle -- Advice for Writing Vignettes -- Organization -- CRAN Notes -- Where to Go Next -- 7. Testing -- Test Workflow -- Test Structure -- Expectations -- Writing Tests -- What to Test -- Skipping a Test -- Building Your Own Testing Tools -- Test Files -- CRAN Notes -- 8. Namespace -- Motivation -- Search Path -- The NAMESPACE -- Workflow -- Exports -- S3 -- S4 -- RC -- Data -- Imports -- R Functions -- S3 -- S4 -- Compiled Functions -- 9. External Data -- Exported Data -- Documenting Datasets -- Internal Data -- Raw Data -- Other Data -- CRAN Notes -- 10.Compiled Code -- C++ -- Workflow -- Documentation -- Exporting C++ Code -- Importing C++ Code -- Best Practices -- C -- Getting Started with .Call() -- Getting Started with C() -- Workflow -- Exporting C Code -- Importing C Code -- Best Practices -- Debugging Compiled Code -- Makefiles -- Other Languages -- Licensing -- Development Workflow -- CRAN Issues -- 11. Installed Files -- Package Citation -- Other Languages -- 12. Other Components -- Demos -- pt. III Best Practices -- 13. Git and GitHub -- RStudio, Git, and GitHub -- Initial Setup -- Creating a Local Git Repository -- Seeing What's Changed -- Recording Changes -- Best Practices for Commits -- Ignoring Files -- Undoing Mistakes -- Synchronizing with GitHub -- Benefits of Using GitHub -- Working with Others -- Issues -- Branches -- Making a Pull Request -- Submitting a Pull Request to Another Repo -- Reviewing and Accepting Pull Requests -- Learning More -- 14. Automated Checking -- Workflow -- Checks -- Check Metadata -- Package Structure -- Description -- Namespace -- R Code -- Data -- Documentation -- Demos -- Compiled Code -- Tests -- Vignettes -- Checking After Every Commit with Travis -- Basic Config -- Other Uses -- 15. Releasing a Package -- Version Number -- Backward Compatibility -- The Submission Process -- Test Environments -- Check Results -- Reverse Dependencies -- CRAN Policies -- Important Files -- README.md -- README. Rmd -- NEWS.md -- Release -- On Failure -- Binary Builds -- Prepare for Next Version -- Publicizing Your Package -- Congratulations!},
author = {Wickham, Hadley},
isbn = {9781491910597},
title = {{R packages}}
}
@book{Peng2014,
abstract = {This book is about the fundamentals of R programming. You will get started with the basics of the language, learn how to manipulate datasets, how to write functions, and how to debug and optimize code. With the fundamentals provided in this book, you will have a solid foundation on which to build your data science toolbox.},
author = {Peng, Roger D.},
isbn = {9781365056826},
pages = {183},
publisher = {Leanpub},
title = {{R Programming for data science}},
year = {2014}
}
@book{Wickham2015,
abstract = {An Essential Reference for Intermediate and Advanced R Programmers Advanced R presents useful tools and techniques for attacking many types of R programming problems, helping you avoid mistakes and dead ends. With more than ten years of experience programming in R, the author illustrates the elegance, beauty, and flexibility at the heart of R. The book develops the necessary skills to produce quality code that can be used in a variety of circumstances. You will learn: The fundamentals of R, including standard data types and functions Functional programming as a useful framework for solving wide classes of problems The positives and negatives of metaprogramming How to write fast, memory-efficient code This book not only helps current R users become R programmers but also shows existing programmers what's special about R. Intermediate R programmers can dive deeper into R and learn new strategies for solving diverse problems while programmers from other languages can learn the details of R and understand why R works the way it does. Introduction -- Foundations. Data structures -- Subsetting -- Vocabulary -- Style guide -- Functions -- OO field guide -- Environments -- Debugging, condition handling, and defensive programming -- Functional programming. Functional programming -- Functionals -- Function operators -- Computing on the language. Non-standard evaluation -- Expressions -- Domain specific languages -- Performance. Performance -- Optimising code -- Memory -- High performance functions with Rcpp -- R's C interface.},
author = {Wickham, Hadley},
isbn = {9781466586963},
pages = {450},
publisher = {CRC Press},
title = {{Advanced R}},
year = {2015}
}
@book{Gillespie,
abstract = {Copyright; Table of Contents; Preface; Conventions Used in This Book; Using Code Examples; O'Reilly Safari; How to Contact Us; Acknowledgments; Colin; Robin; Chapter 1. Introduction; Prerequisites; Who This Book Is for and How to Use It; What Is Efficiency?; What Is Efficient R Programming?; Why Efficiency?; Cross-Transferable Skills for Efficiency; Touch Typing; Consistent Style and Code Conventions; Benchmarking and Profiling; Benchmarking; Benchmarking Example; Profiling; Book Resources; R Package; Online Version; References; Chapter 2. Efficient Setup; Prerequisites Top Five Tips for an Efficient R SetupOperating System; Operating System and Resource Monitoring; R Version; Installing R; Updating R; Installing R Packages; Installing R Packages with Dependencies; Updating R Packages; R Startup; R Startup Arguments; An Overview of R's Startup Files; The Location of Startup Files; The .Rprofile File; Example .Rprofile File; The .Renviron File; RStudio; Installing and Updating RStudio; Window Pane Layout; RStudio Options; Autocompletion; Keyboard Shortcuts; Object Display and Output Table; Project Management; BLAS and Alternative R Interpreters Testing Performance Gains from BLASOther Interpreters; Useful BLAS/Benchmarking Resources; References; Chapter 3. Efficient Programming; Prerequisites; Top Five Tips for Efficient Programming; General Advice; Memory Allocation; Vectorized Code; Communicating with the User; Fatal Errors: stop(); Warnings: warning(); Informative Output: message() and cat(); Invisible Returns; Factors; Inherent Order; Fixed Set of Categories; The Apply Family; Example: Movies Dataset; Type Consistency; Caching Variables; Function Closures; The Byte Compiler; Example: The Mean Function; Compiling Code; References Chapter 4. Efficient WorkflowPrerequisites; Top Five Tips for Efficient Workflow; A Project Planning Typology; Project Planning and Management; Chunking Your Work; Making Your Workflow SMART; Visualizing Plans with R; Package Selection; Searching for R Packages; How to Select a Package; Publication; Dynamic Documents with R Markdown; R Packages; Reference; Chapter 5. Efficient Input/Output; Prerequisites; Top Five Tips for Efficient Data I/O; Versatile Data Import with rio; Plain-Text Formats; Differences Between fread() and read{\_}csv(); Preprocessing Text Outside R; Binary File Formats Native Binary Formats: Rdata or Rds?The Feather File Format; Benchmarking Binary File Formats; Protocol Buffers; Getting Data from the Internet; Accessing Data Stored in Packages; References; Chapter 6. Efficient Data Carpentry; Prerequisites; Top Five Tips for Efficient Data Carpentry; Efficient Data Frames with tibble; Tidying Data with tidyr and Regular Expressions; Make Wide Tables Long with gather(); Split Joint Variables with separate(); Other tidyr Functions; Regular Expressions; Efficient Data Processing with dplyr; Renaming Columns; Changing Column Classes; Filtering Rows},
author = {Gillespie, Colin (Colin Stevenson) and Lovelace, Robin},
isbn = {9781491950784},
pages = {203},
title = {{Efficient R programming : a practical guide to smarter programming}}
}
